package es.crimarde.helpers;

import org.springframework.util.Base64Utils;

import es.crimarde.model.Book;
import es.crimarde.model.Imagen;
import es.crimarde.negocio.BookDTO;
import es.crimarde.negocio.ImageDTO;
import ma.glasnost.orika.CustomMapper;
import ma.glasnost.orika.MapperFacade;
import ma.glasnost.orika.MapperFactory;
import ma.glasnost.orika.MappingContext;
import ma.glasnost.orika.impl.DefaultMapperFactory;

public class OrikaMapper {

	private static final MapperFactory mapperFactory;

	static {		
		mapperFactory = new DefaultMapperFactory.Builder().build();
		
		mapperFactory.classMap(Book.class, BookDTO.class)
			.exclude("id")
			.exclude("imagen")
			.field("titulo", "titulo")
			.field("sinopsis", "sinopsis")
			.field("autor", "autor")
			.field("precio", "precio")
			.field("isbn", "isbn")
			.field("genero", "genero")
			.field("paginas", "paginas")
			.field("imagen", "base64")
			.customize(new CustomMapper<Book,BookDTO>() {
	            @Override
	            public void mapAtoB(Book book, BookDTO bookDTO, MappingContext mappingContext){
	               bookDTO.setBase64(Base64Utils.encodeToString(book.getImagen().getImagen()));
	            }
			})
			//.byDefault()
			.register();

		mapperFactory.classMap(BookDTO.class, Book.class)
			.exclude("id")
			.field("titulo", "titulo")
			.field("sinopsis", "sinopsis")
			.field("autor", "autor")
			.field("imagen", "imagen")
			.field("precio", "precio")
			.field("isbn", "isbn")
			.field("genero", "genero")
			.field("paginas", "paginas")
			.byDefault()
			.register();
		
		mapperFactory.classMap(Imagen.class, ImageDTO.class)
		.byDefault()
		.register();
		
		mapperFactory.classMap(ImageDTO.class, Imagen.class)
		.byDefault()
		.register();
		
		mapperFactory.classMap(Imagen.class, BookDTO.class)
		.customize(new CustomMapper<Imagen,BookDTO>() {
            @Override
            public void mapAtoB(Imagen imagen, BookDTO bookDTO, MappingContext mappingContext){
               bookDTO.setBase64(Base64Utils.encodeToString(imagen.getImagen()));
            }
		})
		.register();
	}

	private OrikaMapper() {
	}

	public static MapperFacade getMapperFacade() {
		return mapperFactory.getMapperFacade();
	}
}
