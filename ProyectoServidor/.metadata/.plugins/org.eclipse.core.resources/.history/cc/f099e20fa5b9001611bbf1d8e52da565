package es.crimarde.core.controller;

import java.util.ArrayList;
import java.util.List;

import org.hamcrest.Matchers;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;

import es.crimarde.core.aplication.Application;
import es.crimarde.core.model.ResponseList;
import es.crimarde.negocio.BookDTO;
import es.crimarde.service.Service;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes =Application.class)
public class ControllerTest {

	private MockMvc mockMvc;
	
	@Before
    public void setup() {
        this.mockMvc = standaloneSetup(new Controller()).build();
    }

    @Test
    public void testSayHelloWorld() throws Exception {
        this.mockMvc.perform(get("/").accept(MediaType.parseMediaType("application/json;charset=UTF-8")))
                .andExpect(status().isOk())
                .andExpect(content().contentType("application/json"));

    }
	
	@Mock private Service servicio;
	@InjectMocks private Controller controller = new Controller();
	
	
	@Test
	public void responseList(){
		MockitoAnnotations.initMocks(ControllerTest.class);
		
		List<BookDTO> lista = buildBookList(5);
		Mockito.when(servicio.retrieveAll()).thenReturn(lista);
		
		ResponseList response = controller.retrieveList();
		
		Assert.assertThat(response, Matchers.isA(ResponseList.class));
		Assert.assertThat(response.getStatus(), Matchers.is(HttpStatus.OK.name()));
		Assert.assertThat(response.getData(), Matchers.not(Matchers.is(Matchers.empty())));
		Assert.assertThat(response.getData().size(), Matchers.is(lista.size()));
		
	}
	
	
	private List<BookDTO> buildBookList(int elementos){
		
		List<BookDTO> lista = new ArrayList<>();
		
		for(int i = 0; i<elementos; i++){
			lista.add(buildBook(i));
		}
		
		return lista;
		
	}
	
	private BookDTO buildBook(int order){
		BookDTO book = new BookDTO().builder()
				.whithId(1)
				.whithAutor("autor".concat(String.valueOf(order)))
				.whithPrecio(new Long(order))
				.whithSinopsis("resumen libro ".concat(String.valueOf(order)))
				.whithTitulo("Titulo".concat(String.valueOf(order)))
				.whithImagen(null)
				.build();
		
		return book;
	}
}
