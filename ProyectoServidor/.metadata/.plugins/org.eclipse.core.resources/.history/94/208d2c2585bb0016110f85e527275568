package es.crimarde.service.impl;

import org.hamcrest.Matchers;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

import es.crimarde.dao.BookRepository;
import es.crimarde.helpers.impl.BookTransformerHelper;
import es.crimarde.model.Book;
import es.crimarde.negocio.BookDTO;

@RunWith(MockitoJUnitRunner.class)
public class ServiceImplTest {

	@Mock private Book bookMock;
	@Mock private BookDTO bookDTOMock;
	@Mock private BookRepository repositoryMock;;
	@Mock private BookTransformerHelper transformerMock;;
	@InjectMocks private ServiceImpl servicio = new ServiceImpl();
	
	@Before
	public void setUp(){
	}
	
	@Test
	public void retrieveTest(){
		
		long idToRetrieve = 1;
		
		Book book = buildBook(idToRetrieve);
		
		Mockito.when(repositoryMock.findOne(Mockito.anyLong())).thenReturn(bookMock);
		Mockito.when(transformerMock.entityToDto(bookMock)).thenReturn(bookDTOMock);
		
		BookDTO bookDTO = servicio.retrieve(idToRetrieve);
		
		Assert.assertThat(bookDTO, Matchers.notNullValue());
		Assert.assertThat(bookDTO, Matchers.isA(BookDTO.class));
	}
	
	@Test
	public void retrieveTestWithOutOfRangeId(){
		
		Integer idToRetrieve = 1000;
		
		Book book = buildBook(idToRetrieve);
		
		Mockito.when(repositoryMock.findOne(idToRetrieve)).thenReturn(null);
		Mockito.when(transformerMock.entityToDto(null)).thenReturn(null);
		
		BookDTO bookDTO = servicio.retrieve(idToRetrieve);
		
		Assert.assertThat(bookDTO, Matchers.nullValue());
	}
	
	private Book buildBook(long order){
		Book book = new Book().builder()
				.whithId(1)
				.whithAutor("autor".concat(String.valueOf(order)))
				.whithPrecio(new Long(order))
				.whithSinopsis("resumen libro ".concat(String.valueOf(order)))
				.whithTitulo("Titulo".concat(String.valueOf(order)))
				.build();
		
		return book;
	}
}
