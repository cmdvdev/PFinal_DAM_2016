Para	la	gestión	del	esquema	jugaremos	con	el	valor	de	la	propiedad	
spring.jpa.hibernate.ddl-auto.
§ spring.jpa.hibernate.ddl-auto=none:	No	hace	nada	con	el	esquema.	
§ spring.jpa.hibernate.ddl-auto=validate:	Verifica	que	el	esquema de	la	base	de	datos	es	compatible	con	las	entidades	de	la	aplicación	y	si	no	lo	es	
genera	un	error.	
§ spring.jpa.hibernate.ddl-auto=update:	Incluye	en	el	esquema	actual	los	elementos	necesarios	para	hacer	el	esquema	compatible	con	las entidades	(no	borra	ningún	elemento).	
§ spring.jpa.hibernate.ddl-auto=create-drop:	Crea	el	esquema	al iniciar	la	aplicación	y	lo	borra	al	finalizar	(igual	que	una	BBDD en	memoria).

Cuándo	usar	los	diferentes	tipos	de	gestión	de	esquema:
§ create-drop:	En	desarrollo.	
§ validate:	En	desarrollo,	usando	un	esquema	existente.	
§ update:	Cuando	queramos	crear	el	esquema	en	la	base	de	datos a	partir	de	las	entidades	(clases	Java)	que	hemos	definido.
§ none:	En	producción.	


-- Extraido de la documentacion
/*You can set spring.jpa.hibernate.ddl-auto explicitly and the standard Hibernate property 
values are none, validate, update, create, create-drop. 
Spring Boot chooses a default value for you based on whether it thinks your database is embedded (default create-drop) or not (default none). 
An embedded database is detected by looking at the Connection type: hsqldb, h2 and derby are embedded, the rest are not. 
Be careful when switching from in-memory to a ‘real’ database that you don’t make assumptions about 
the existence of the tables and data in the new platform. 
You either have to set ddl-auto explicitly, or use one of the other mechanisms to initialize the database.

[Note]
You can output the schema creation by enabling the org.hibernate.SQL logger. This is done for you automatically if you enable the debug mode.
In addition, a file named import.sql in the root of the classpath will be executed on startup if Hibernate creates the schema from scratch 
(that is if the ddl-auto property is set to create or create-drop). 
This can be useful for demos and for testing if you are careful, but probably not something you want to be on the classpath in production. 
It is a Hibernate feature (nothing to do with Spring).
*/