import { Injectable } from "@angular/core";
import { Http, Response, Headers } from "@angular/http";
import "rxjs/add/operator/map";
import { Observable } from "rxjs/Observable";
import { Libro } from "../model/libro";

@Injectable()
  /**
   * Clase de servicio, se encarga de hacer las llamadas al webservice
   * El resultado se mapea en cada uno de los componentes
   */
export class LibroService {
    constructor(private _http: Http) { }

    createAuthorizationHeader() {
        var headers = new Headers();
        headers.append('X-Requested-With', 'XMLHttpRequest');
        headers.append('Authorization', 'Basic ' + btoa('admin:pass'));
        headers.append('Content-Type', 'application/json');
        headers.append('Accept', 'application/json');
        //headers.append('Content-Type', 'application/x-www-form-urlencoded');
        console.log(headers);
        return headers
    }

    /**
     * Metodo que obtiene un listado completo de libros
     */
    getLibros(indice) {
      if(indice === undefined){
        indice = 1;
      }
      return this._http.get("http://cmdvdev.com:8090/lista/" + indice )
        .map(res => res.json());
    }

    /**
    *
    */
    getLibrosByWord(word,page){
      return this._http.get("http://cmdvdev.com:8090/search/" + word +"page/" + page)
        .map(res => res.json());
    }


    /**
     * Metodo que obtiene un libro por su id
     * o un libro aleatorio si se le pasa el parametro random
     */
    getLibro(id: string, random = null) {
      if (random == null) {
          console.log('Peticion de libro por getLibro con id: ' + id);

          return this._http.get(
            "http://cmdvdev.com:8090/book/retrieve/"+id,
            {headers: this.createAuthorizationHeader()}
          ).map(res => res.json());
      } else {
          console.log('Peticion de libro aleatorio');
          return this._http.get(
            "http://cmdvdev.com:8090/book/random",
            {headers: this.createAuthorizationHeader()}
          ).map(res => res.json());
      }
    }

    /**
     * AÃ±ade un nuevo libro a la base de datos
     */
    addLibro(libro: Libro) {
      return this._http.post(
        "http://cmdvdev.com:8090/book/add",
        this.construyeJson(libro),
        {headers: this.createAuthorizationHeader()}
      ).map(res => res.json());
    }

    /**
     * Edita un libro de la base de datos
     */
    editLibro(id: string, libro: Libro) {
        return this._http.put(
          "http://cmdvdev.com:8090/update/" + id,
          this.construyeJson(libro),
          {headers: this.createAuthorizationHeader()}
        ).map(res => res.json());
    }

    /**
    * Elimina un libro de la base de datos
    */
    deleteLibro(id: string) {
        return this._http.delete(
          "http://cmdvdev.com:8090/delete/" + id,
          {headers: this.createAuthorizationHeader()}
        ).map(res => res.json());
    }

    private construyeJson(libro: Libro){
        console.log('Servicio : AddLibro');
        let params = JSON.stringify(libro);
        console.log('JSON: \n :' + params);
        return params;
    }
}
