/* global commandOptions */
'use strict';

const Serve = require('angular-cli/commands/serve').default;
const intercept = require('intercept-stdout');

const extractNGEvent = require('../utils/extractNGEvent');
const wsManager = require('../services/WSConnectionsManager');

const NGEventType = require('../utils/consts').NGEventType;
const BuildStatus = require('../utils/consts').BuildStatus;
const NGServerStatus = require('../utils/consts').NGServerStatus;

const getRunningInstallations = require('../../lib/utils').getRunningInstallations;
const prepareMessage = require('../../lib/utils').prepareMessage;

const aliveMessageData = {
  serverId: Date.now(),
  projectPath: null,
  commandOptions: null,
  command: 'registerServer',
  method: 'registerServer',
};

const ngServeStatus = {
  serverStatus: NGServerStatus.STARTING,
  build: {
    status: BuildStatus.NOT_READY,
    errors: [],
  },
};

// add webclipse-launch-id to supported options
Serve.prototype.availableOptions.push(
  { name: 'webclipse-launch-id', type: String }
);

module.exports = Serve.extend({
  run(commandOptions) {

    aliveMessageData.commandOptions = commandOptions;
    aliveMessageData.projectPath = this.project.root;

    wsManager.onConnect(JSON.stringify(aliveMessageData));
    wsManager.registerServerStatus(ngServeStatus);

    getRunningInstallations()
      .subscribe(installations => {
        installations.forEach(installation => {
          wsManager.register(installation.port);    
        });
      });
    
    wsManager.on('message', (ws, data) => {
      const message = JSON.parse(data);
      switch (message.command) {
        case 'terminate':
          process.exit();
          break;
        default:
          // TODO: Handle unknown command
      }

    });

    /*
    * Intercepting stdout to extract relevant info
    * e.g. Where the dev server is running, error build, etc.
    */
    intercept((text) => {
      const ngEvent = extractNGEvent(text);

      if (ngEvent) {
        switch (ngEvent.type) {
          case NGEventType.NG_SERVER_STATUS:
            ngServeStatus.serverStatus = ngEvent.params.status;
            wsManager.sendEventToAll('ng-serve-status-update');
            break;

          case NGEventType.BUILD_STATUS:
            // Resetting build error when a new build starts
            if (ngEvent.params.status === BuildStatus.BUILD_STARTED) {
              ngServeStatus.build.errors = [];
            }

            ngServeStatus.build.status = ngEvent.params.status;
            wsManager.sendEventToAll('ng-serve-status-update');
            break;

          case NGEventType.BUILD_ERROR:
            ngServeStatus.build.errors.push(ngEvent.params);
            break;

          default:
            // TODO: Handle unknown NGEventType
        }
      }

      return text;
    });

    // eslint-disable-next-line no-underscore-dangle
    return this._super.run.apply(this, [commandOptions]);
  },
});

module.exports.overrideCore = true;
